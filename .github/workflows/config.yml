on:
  push:
    branches:
      - master
  pull_request:

env:
  DISPLAY: ':0.0'

jobs:
  ros:
    runs-on: ubuntu-latest
#    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - ROS_DISTRO: indigo
            CONTAINER: jskrobotics/ros-ubuntu:14.04
            USE_DEB: false
            NOT_TEST_INSTALL : true
            TEST_PKGS : "jsk_robot_startup" # app_manager required to pass jsk_fetch test, so this job mainly test if we can build sources
            BEFORE_SCRIPT : "echo 'ros-indigo-pepper-meshes ros-pepper-meshes/accepted-ros-pepper-meshes boolean true' | sudo debconf-set-selections; sudo apt-get install -y -qq ros-indigo-pepper-meshes; echo 'ros-indigo-nao-meshes ros-nao-meshes/accepted-ros-nao-meshes boolean true' | sudo debconf-set-selections; sudo apt-get install -y -qq ros-indigo-nao-meshes; apt-get download ros-indigo-julius; wget -O stripdeb.sh https://gist.githubusercontent.com/jordansissel/748313/raw/8aebce360bc082e33af7bba3c90f755eb655783b/stripdeb.sh; bash stripdeb.sh ros-indigo-julius*.deb; sudo dpkg --force-all -i ros-indigo-julius*.deb; sudo apt-get -y -f install; sudo apt-mark hold ros-indigo-julius" # to install pepper_meshes, nao_meshes, the licenses have to be accepted
          - ROS_DISTRO: kinetic
            CONTAINER: jskrobotics/ros-ubuntu:16.04
            USE_DEB: false
            NOT_TEST_INSTALL : true
            BEFORE_SCRIPT : "wstool merge jsk_robot/jsk_fetch_robot/jsk_fetch_user.rosinstall.kinetic; wstool update; apt-get download ros-kinetic-julius; wget -O stripdeb.sh https://gist.githubusercontent.com/jordansissel/748313/raw/8aebce360bc082e33af7bba3c90f755eb655783b/stripdeb.sh; bash stripdeb.sh ros-kinetic-julius*.deb; sudo dpkg --force-all -i ros-kinetic-julius*.deb; sudo apt-get -y -f install; sudo apt-mark hold ros-kinetic-julius; git clone https://github.com/k-okada/denso_robot_ros.git; (cd ..; git clone https://github.com/k-okada/cobotta_descriptions.git); (cd denso_robot_ros/denso_robot_descriptions; cp -r ../../../cobotta_descriptions/cobotta_description . )"
            EXTRA_DEB : "ros-kinetic-convex-decomposition ros-kinetic-ivcon"
          - ROS_DISTRO: melodic
            CONTAINER: jskrobotics/ros-ubuntu:18.04
            USE_DEB: false
            NOT_TEST_INSTALL : true
            BEFORE_SCRIPT : "apt-get download ros-melodic-julius; wget -O stripdeb.sh https://gist.githubusercontent.com/jordansissel/748313/raw/8aebce360bc082e33af7bba3c90f755eb655783b/stripdeb.sh; bash stripdeb.sh ros-melodic-julius*.deb; sudo dpkg --force-all -i ros-melodic-julius*.deb; sudo apt-get -y -f install; sudo apt-mark hold ros-melodic-julius; git clone https://github.com/k-okada/denso_robot_ros.git; (cd ..; git clone https://github.com/k-okada/cobotta_descriptions.git); (cd denso_robot_ros/denso_robot_descriptions; cp -r ../../../cobotta_descriptions/cobotta_description . )"
          - ROS_DISTRO: melodic
            CONTAINER: jskrobotics/ros-ubuntu:18.04
            USE_DEB: false
            NOT_TEST_INSTALL : true
            # The only difference between melodic.yml and melodic_jsk_pr2eus_master.yml is here
            # We checkout jsk_pr2eus to master branch to test the latest jsk_pr2eus with jsk_robot
            # https://github.com/jsk-ros-pkg/jsk_pr2eus/pull/1397
            BEFORE_SCRIPT : "apt-get download ros-melodic-julius; wget -O stripdeb.sh https://gist.githubusercontent.com/jordansissel/748313/raw/8aebce360bc082e33af7bba3c90f755eb655783b/stripdeb.sh; bash stripdeb.sh ros-melodic-julius*.deb; sudo dpkg --force-all -i ros-melodic-julius*.deb; sudo apt-get -y -f install; sudo apt-mark hold ros-melodic-julius; git clone https://github.com/k-okada/denso_robot_ros.git; (cd ..; git clone https://github.com/k-okada/cobotta_descriptions.git); (cd denso_robot_ros/denso_robot_descriptions; cp -r ../../../cobotta_descriptions/cobotta_description . ); (cd jsk-ros-pkg/jsk_pr2eus; git stash; git checkout master);"
          - ROS_DISTRO: noetic
            CONTAINER: ubuntu:20.04
            USE_DEB: false
            NOT_TEST_INSTALL : true
            TEST_PKGS : "jsk_robot_startup" # check only jsk_robot_startup
            BEFORE_SCRIPT : "apt-get download ros-noetic-julius; wget -O stripdeb.sh https://gist.githubusercontent.com/jordansissel/748313/raw/8aebce360bc082e33af7bba3c90f755eb655783b/stripdeb.sh; bash stripdeb.sh ros-noetic-julius*.deb; sudo dpkg --force-all -i ros-noetic-julius*.deb; sudo apt-get -y -f install; sudo apt-mark hold ros-noetic-julius; git clone https://github.com/k-okada/denso_robot_ros.git; (cd ..; git clone https://github.com/k-okada/cobotta_descriptions.git); (cd denso_robot_ros/denso_robot_descriptions; cp -r ../../../cobotta_descriptions/cobotta_description . )"


    container:
      image: ${{ matrix.CONTAINER }}
      volumes:
        - /tmp/node20:/__e/node20

    steps:
      - name: Install latest git ( use sudo for ros-ubuntu )
        run: |
          (apt-get update && apt-get install -y sudo) || echo "OK"
          sudo apt-get update && sudo apt-get install -y software-properties-common && sudo apt-get update && sudo add-apt-repository -y ppa:git-core/ppa && sudo apt-get update && sudo apt-get install -y git

      - name: work around permission issue  # https://github.com/actions/checkout/issues/760#issuecomment-1097501613
        run: |
          set -x
          export USER=$(whoami)
          if [[ "${{ matrix.CONTAINER }}" =~ "jskrobotics/ros-ubuntu:".* ]]; then
             sudo mkdir -p /__w/
             sudo chmod 777 -R /__w/
             sudo chown -R $USER $HOME
             # sudo mkdir -p /home/runner/work/_temp/_github_workflow/
             # sudo chown -R $USER $HOME /home/runner/work/_temp/_github_workflow/
             # ls -al /home/runner/work/_temp/_github_workflow/
          fi
          git config --global --add safe.directory $GITHUB_WORKSPACE
        shell: bash

      - name: Try to replace `node` with an glibc 2.17
        shell: bash
        run: |
          if [[ "${{ matrix.CONTAINER }}" =~ "jskrobotics/ros-ubuntu:".* ]]; then
             export USER=$(whoami)
             sudo chmod 777 -R /__e/node20
             sudo chown -R $USER /__e/node20
          fi
          ls -lar /__e/node20 &&
          sudo apt-get install -y curl &&
          curl -Lo /tmp/node.tar.gz https://unofficial-builds.nodejs.org/download/release/v20.17.0/node-v20.17.0-linux-x64-glibc-217.tar.gz &&
          cd /__e/node20 &&
          tar -x --strip-components=1 -f /tmp/node.tar.gz &&
          ls -lar /__e/node20/bin/

      - name: Chcekout
        uses: actions/checkout@v3.0.2
        with:
          submodules: true

      - name: Start X server
        run: |
          if [[ "${{ matrix.CONTAINER }}" =~ "jskrobotics/ros-ubuntu:14.04" ]]; then exit 0; fi
          echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections || echo "failing on ros-ubuntu is OK" # set non interactive tzdata https://stackoverflow.com/questions/8671308/non-interactive-method-for-dpkg-reconfigure-tzdata
          sudo apt-get -y -qq install mesa-utils x11-xserver-utils xserver-xorg-video-dummy wget
          export DISPLAY=:0
          wget https://raw.githubusercontent.com/jsk-ros-pkg/jsk_travis/master/dummy.xorg.conf -O /tmp/dummy.xorg.conf
          sudo Xorg -noreset +extension GLX +extension RANDR +extension RENDER -logfile /tmp/xorg.log -config /tmp/dummy.xorg.conf $DISPLAY &
          sleep 3 # wait x server up
          export QT_X11_NO_MITSHM=1 # http://wiki.ros.org/docker/Tutorials/GUI
          xhost +local:root
        shell: bash

      - name: Run jsk_travis
        uses: jsk-ros-pkg/jsk_travis@master
        with:
          ROS_PARALLEL_JOBS : "-j2"
          CATKIN_PARALLEL_JOBS : "-p2"
          ROS_PARALLEL_TEST_JOBS : "-j1"
          CATKIN_PARALLEL_TEST_JOBS : "-p1"
          ROS_DISTRO : ${{ matrix.ROS_DISTRO }}
          USE_DEB :  ${{ matrix.USE_DEB }}
          NOT_TEST_INSTALL : ${{ matrix.NOT_TEST_INSTALL }}
          TEST_PKGS : ${{ matrix.TEST_PKGS }}
          BEFORE_SCRIPT : ${{ matrix.BEFORE_SCRIPT }}
          EXTRA_DEB : ${{ matrix.EXTRA_DEB }}

  # ROS-O setup for v4hn https://github.com/v4hn/ros-o-builder/blob/jammy-one/README.md#install-instructions
  # ROS-O setup for techfak https://ros.packages.techfak.net/
  # note that v4hn uses ROS_DISTRO=one and techfak uses ROS_DISTRO
  ros-o:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - DISTRO: ubuntu:22.04
            ROS_ONE_VARIANT: v4hn
            ROS_REPOSITORY_URL: "deb [trusted=yes] https://raw.githubusercontent.com/v4hn/ros-o-builder/jammy-one/repository ./"
            ROSDEP_PACKAGE_MAPPING: "yaml https://raw.githubusercontent.com/v4hn/ros-o-builder/jammy-one/repository/local.yaml debian"
          - DISTRO: ubuntu:24.04
            ROS_ONE_VARIANT: techfak
            ROS_REPOSITORY_URL: "deb [trusted=yes] https://ros.packages.techfak.net noble main"
            ROSDEP_PACKAGE_MAPPING: "yaml https://ros.packages.techfak.net/ros-one.yaml ubuntu"

    container: ${{ matrix.DISTRO }}

    env:
      DEBIAN_FRONTEND : noninteractive

    steps:
      - name: Chcekout Source
        uses: actions/checkout@v3.0.2

      - name: Setup ROS-O deb repository
        run: |
          set -x
          apt update && apt install -qq -y ca-certificates git
          echo ${{ matrix.ROS_REPOSITORY_URL }} | tee /etc/apt/sources.list.d/ros-o-builder.list
          ##
          # https://github.com/v4hn/ros-deb-builder-action/blob/b7c0ed93fde3a86b5b1027bf8f7145cad6067c90/prepare.sh#L27-L28
          # Canonical dropped the Debian ROS packages from 24.04 for political reasons. Wow.
          if [[ "${{ matrix.ROS_ONE_VARIANT }}" == "v4hn" && "${{ matrix.DISTRO }}" == "ubuntu:24.04" ]]; then apt install -y software-properties-common retry && retry -d 50,10,30,300 -t 12 add-apt-repository -y ppa:v-launchpad-jochen-sprickerhof-de/ros; fi
          ##
          apt update
          if [[ "${{ matrix.ROS_ONE_VARIANT }}" == "v4hn" ]]; then
              apt install -qq -y python3-rosdep2
          fi
          if [[ "${{ matrix.ROS_ONE_VARIANT }}" == "techfak"  ]]; then
              # Do not install python3-rosdep2, which is an outdated version of rosdep shipped via the Ubuntu repositories (instead of ROS)!
              apt install -qq -y python3-rosdep
              rosdep init
          fi
          echo ${{ matrix.ROSDEP_PACKAGE_MAPPING }} | tee /etc/ros/rosdep/sources.list.d/1-ros-o-builder.list
          rosdep update
        shell: bash

      - name: Setup catkin-tools
        run: |
          set -x
          # setup catkin tools
          apt install -qq -y python3-pip
          if [[ "${{ matrix.ROS_ONE_VARIANT }}" == "v4hn" ]]; then
              pip3 install catkin-tools==0.9.4
              apt install -qq -y catkin
          fi
          if [[ "${{ matrix.ROS_ONE_VARIANT }}" == "techfak" ]]; then
              apt install -qq -y ros-one-catkin python3-catkin-tools
          fi
          # setup build tools
          apt install -qq -y cmake build-essential ros-one-rosbash
        shell: bash

      - name: Setup Workspace
        run: |
          source /opt/ros/one/setup.bash
          set -x
          # setup workspace
          mkdir -p ~/ws/src
          cd ~/ws/src
          if [[ "${{ matrix.ROS_ONE_VARIANT }}" == "techfak" ]]; then
          # TODO: remove these lines and uncomment https://github.com/ubi-agni/ros-builder-action/blob/191fab06004ad5784c28cf2ba2b18f6d163a860d/ros-one.repos#L1089
              git clone https://github.com/locusrobotics/catkin_virtualenv.git
          fi
          ln -sf $GITHUB_WORKSPACE .
          rosdep install -qq -r -y --from-path . --ignore-src || echo "OK"
          # check all system packages are able to install, because ROS-O build deb files that needs all packages
          PIP_BREAK_SYSTEM_PACKAGES=1 rosdep install -qq --simulate -y --from-path . --ignore-src -t exec -t buildtool_export -t buildtool -t build -t build_export | tee rosdep-install.sh
          sed 's/apt-get install/apt-get -y install/;/install ros-one/s/^/#/;/pip3 install/s/^/#/' rosdep-install.sh | bash -xe
        shell: bash

      - name: Compile Packages
        run: |
          source /opt/ros/one/setup.bash
          set -x
          cd ~/ws/
          catkin build --no-status -sv ${{ matrix.CATKIN_OPTIONS }} --cmake-args -DCATKIN_ENABLE_TESTING=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ${{ matrix.CMAKE_OPTIONS }}
        shell: bash